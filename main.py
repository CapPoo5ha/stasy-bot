import asyncio
import json
import os
from datetime import datetime, timedelta
from dotenv import load_dotenv

from aiogram import Bot, Dispatcher, F
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.exceptions import TelegramForbiddenError

# ===== –ó–ê–ì–†–£–ó–ö–ê –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò =====
load_dotenv()

TOKEN = os.getenv('TOKEN')
ADMIN_ID = int(os.getenv('ADMIN_ID'))
CHANNEL_USERNAME = os.getenv('CHANNEL_USERNAME')
MATERIAL_URL = os.getenv('MATERIAL_URL')

if not all([TOKEN, ADMIN_ID, CHANNEL_USERNAME, MATERIAL_URL]):
    raise ValueError("‚ùå –ü—Ä–æ–≤–µ—Ä—å .env —Ñ–∞–π–ª! –í—Å–µ –ø–æ–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã.")

DATA_FILE = 'users.json'

# ===== –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –î–õ–Ø WINDOWS + RENDER =====
if os.name == 'nt':
    asyncio.set_event_loop_policy(asyncio.WindowsSelectorEventLoopPolicy())

# ===== –ü–û–†–¢ –î–õ–Ø RENDER =====
PORT = int(os.getenv('PORT', 8080))

bot = Bot(token=TOKEN)
dp = Dispatcher()

# ===== –†–ê–ë–û–¢–ê –° –î–ê–ù–ù–´–ú–ò =====
def load_data():
    if os.path.exists(DATA_FILE):
        with open(DATA_FILE, 'r', encoding='utf-8') as f:
            return json.load(f)
    return {'users': {}, 'stats': {'materials': 0, 'broadcasts': 0}}

def save_data(data):
    with open(DATA_FILE, 'w', encoding='utf-8') as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

data = load_data()

@dp.message(Command('start'))
async def start_handler(message: Message):
    user_id = message.chat.id
    user_key = str(user_id)
    
    if user_key not in data['users']:
        data['users'][user_key] = {
            'first_interaction': datetime.now().isoformat(),
            'last_activity': datetime.now().isoformat(),
            'has_material': False
        }
    else:
        data['users'][user_key]['last_activity'] = datetime.now().isoformat()
    
    save_data(data)
    
    markup = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìö –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="check_subscription")]
    ])
    
    await message.answer(
        f"üëã <b>–ü—Ä–∏–≤–µ—Ç!</b>\n\n"
        f"–ü–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª <b>{CHANNEL_USERNAME}</b> –∏ –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É,\n"
        f"—á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª –ø–æ –º–∞—Ä–∫–µ—Ç–∏–Ω–≥—É! üöÄ",
        reply_markup=markup,
        parse_mode='HTML'
    )

@dp.callback_query(F.data == 'check_subscription')
async def check_subscription(callback: CallbackQuery):
    user_id = callback.from_user.id
    user_key = str(user_id)
    
    if user_key not in data['users']:
        data['users'][user_key] = {
            'first_interaction': datetime.now().isoformat(),
            'last_activity': datetime.now().isoformat(),
            'has_material': False
        }
        save_data(data)
    
    user_data = data['users'][user_key]
    
    try:
        member = await bot.get_chat_member(CHANNEL_USERNAME, user_id)
        is_subscribed = member.status in ['member', 'administrator', 'creator']
        
        if is_subscribed:
            # –°–ë–†–û–° –§–õ–ê–ì–ê –ø—Ä–∏ –ø–µ—Ä–µ–ø–æ–¥–ø–∏—Å–∫–µ
            if user_data.get('has_material', False) and not is_subscribed:
                user_data['has_material'] = False
                save_data(data)
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –ü–û–õ–£–ß–ò–¢–¨ –ú–ê–¢–ï–†–ò–ê–õ (–ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∏ –∫–ª–∏–∫–µ)
            material_btn_text = "üîì –ü–æ–ª—É—á–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª" if not user_data.get('has_material', False) else "üîì –ü–æ–ª—É—á–∏—Ç—å –∑–∞–Ω–æ–≤–æ"
            
            markup = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text=material_btn_text, callback_data="get_material")]
            ])
            
            status_text = "–Ω–æ–≤–∏—á–æ–∫" if not user_data.get('has_material', False) else "–≤–µ—Ä–Ω—É–ª—Å—è"
            await callback.message.answer(
                f"‚úÖ <b>–í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã!</b>\n\n"
                f"–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ‚Äî <b>–ø–æ–¥–ø–∏—Å–∫–∞ –ø—Ä–æ–≤–µ—Ä–∏—Ç—Å—è –∑–∞–Ω–æ–≤–æ</b> –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏:\n"
                f"‚Ä¢ –ú–∞—Ç–µ—Ä–∏–∞–ª –¥–ª—è {status_text} ‚ú®",
                reply_markup=markup,
                parse_mode='HTML'
            )
            
        else:
            # –ù–ï –ü–û–î–ü–ò–°–ê–ù
            if user_data.get('has_material', False):
                await callback.message.answer(
                    f"üîí <b>–ú–∞—Ç–µ—Ä–∏–∞–ª –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω!</b>\n\n"
                    f"–í—ã –ø–æ–ª—É—á–∏–ª–∏ –µ–≥–æ —Ä–∞–Ω–µ–µ, –Ω–æ –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç {CHANNEL_USERNAME}.\n"
                    f"<b>–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –∑–∞–Ω–æ–≤–æ</b> –¥–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏! üîì",
                    parse_mode='HTML'
                )
            else:
                markup = InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text=f"üì¢ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ {CHANNEL_USERNAME}", url=f"https://t.me/{CHANNEL_USERNAME[1:]}")],
                    [InlineKeyboardButton(text="üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="check_subscription")]
                ])
                
                await callback.message.answer(
                    f"‚ùå <b>–í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã</b> –Ω–∞ {CHANNEL_USERNAME}\n\n"
                    "1Ô∏è‚É£ –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –ø–æ –∫–Ω–æ–ø–∫–µ\n"
                    "2Ô∏è‚É£ –ù–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É'",
                    reply_markup=markup,
                    parse_mode='HTML'
                )
    
    except Exception as e:
        await callback.message.answer(
            f"‚ö†Ô∏è <b>–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏</b>\n\n"
            f"–£–±–µ–¥–∏—Å—å, —á—Ç–æ –±–æ—Ç ‚Äî <b>–∞–¥–º–∏–Ω</b> –≤ –∫–∞–Ω–∞–ª–µ.\n"
            f"–î–µ—Ç–∞–ª–∏: <code>{str(e)}</code>",
            parse_mode='HTML'
        )
    
    await callback.answer()

@dp.callback_query(F.data == 'get_material')
async def get_material(callback: CallbackQuery):
    user_id = callback.from_user.id
    user_key = str(user_id)
    user_data = data['users'].get(user_key, {})
    
    try:
        # –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–í–ï–†–ö–ê –ü–û–î–ü–ò–°–ö–ò –ü–†–Ø–ú–û –ü–†–ò –ö–õ–ò–ö–ï
        member = await bot.get_chat_member(CHANNEL_USERNAME, user_id)
        is_subscribed = member.status in ['member', 'administrator', 'creator']
        
        if is_subscribed:
            # ‚úÖ –ü–û–î–ü–ò–°–ö–ê –ê–ö–¢–ò–í–ù–ê ‚Äî –í–´–î–ê–Å–ú –ú–ê–¢–ï–†–ò–ê–õ –ö–ê–ö –¢–ï–ö–°–¢
            await callback.message.answer(
                f"üéâ <b>–ü–û–î–ü–ò–°–ö–ê –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ê!</b>\n\n"
                f"üìö <b>–í–∞—à —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª:</b>\n"
                f"<code>{MATERIAL_URL}</code>\n\n"
                f"üí° –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ —Å—Å—ã–ª–∫—É! –û—Å—Ç–∞–≤–∞–π—Ç–µ—Å—å –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–º –∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏ üöÄ",
                parse_mode='HTML'
            )
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            user_data['has_material'] = True
            user_data['received_material'] = datetime.now().isoformat()
            data['stats']['materials'] += 1
            save_data(data)
            
        else:
            # ‚ùå –û–¢–ü–ò–°–ê–õ–°–Ø –ü–û–°–õ–ï –ö–ù–û–ü–ö–ò –ü–†–û–í–ï–†–ö–ò
            await callback.message.answer(
                f"üö´ <b>–û–®–ò–ë–ö–ê! –í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å!</b>\n\n"
                f"–ú–∞—Ç–µ—Ä–∏–∞–ª <b>–ó–ê–ë–õ–û–ö–ò–†–û–í–ê–ù</b>.\n\n"
                f"üîÑ <b>–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –∑–∞–Ω–æ–≤–æ</b> –Ω–∞ {CHANNEL_USERNAME}\n"
                f"   ‚Üì –ù–∞–∂–º–∏—Ç–µ /start –¥–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏",
                parse_mode='HTML'
            )
    
    except Exception as e:
        await callback.message.answer(
            f"‚ö†Ô∏è <b>–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è</b>\n\n"
            f"<code>{str(e)}</code>\n\n"
            f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ /start"
        )
    
    await callback.answer()

@dp.message(Command('broadcast'))
async def broadcast_handler(message: Message):
    if message.from_user.id != ADMIN_ID:
        return await message.answer("‚ùå <b>–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω!</b>")
    
    if len(message.text.split()) < 2:
        await message.answer(
            "üì§ <b>–†–ê–°–°–´–õ–ö–ê</b>\n\n"
            "<code>/broadcast –í–∞—à —Ç–µ–∫—Å—Ç –∑–¥–µ—Å—å</code>",
            parse_mode='HTML'
        )
        return
    
    text = message.text.split(maxsplit=1)[1]
    active_users = [int(uid) for uid in data['users'].keys()]
    sent_count = failed_count = 0
    
    for user_id in active_users:
        try:
            await bot.send_message(user_id, text)
            sent_count += 1
        except TelegramForbiddenError:
            del data['users'][str(user_id)]
            failed_count += 1
        except:
            failed_count += 1
    
    data['stats']['broadcasts'] += 1
    data['stats']['last_broadcast'] = datetime.now().isoformat()
    save_data(data)
    
    await message.answer(
        f"üì§ <b>–†–ê–°–°–´–õ–ö–ê –û–ö–û–ù–ß–ï–ù–ê</b>\n\n"
        f"‚úÖ <b>–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ:</b> {sent_count}\n"
        f"‚ùå <b>–û—à–∏–±–æ–∫:</b> {failed_count}\n"
        f"üë• <b>–ê–∫—Ç–∏–≤–Ω—ã—Ö:</b> {len(data['users'])}",
        parse_mode='HTML'
    )

@dp.message(Command('schedule'))
async def schedule_handler(message: Message):
    if message.from_user.id != ADMIN_ID:
        return await message.answer("‚ùå <b>–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω!</b>")
    
    if len(message.text.split()) < 3:
        await message.answer(
            "‚è∞ <b>–û–¢–õ–û–ñ–ï–ù–ù–ê–Ø –†–ê–°–°–´–õ–ö–ê</b>\n\n"
            "<code>/schedule HH:MM —Ç–µ–∫—Å—Ç</code>\n\n"
            "<i>–ü—Ä–∏–º–µ—Ä: /schedule 18:00 –ü—Ä–∏–≤–µ—Ç!</i>",
            parse_mode='HTML'
        )
        return
    
    parts = message.text.split(maxsplit=2)
    time_str, text = parts[1], parts[2]
    
    try:
        hour, minute = map(int, time_str.split(':'))
        now = datetime.now()
        scheduled_time = now.replace(hour=hour, minute=minute, second=0, microsecond=0)
        
        if scheduled_time <= now:
            scheduled_time += timedelta(days=1)
        
        asyncio.create_task(send_scheduled_broadcast(scheduled_time, text))
        
        await message.answer(
            f"‚è∞ <b>–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ!</b>\n\n"
            f"üìÖ <b>{scheduled_time.strftime('%d.%m.%Y %H:%M')}</b>\n"
            f"üìù <i>{text[:50]}...</i>",
            parse_mode='HTML'
        )
        
    except:
        await message.answer("‚ùå <b>–§–æ—Ä–º–∞—Ç:</b> HH:MM")

async def send_scheduled_broadcast(scheduled_time, text):
    delay = (scheduled_time - datetime.now()).total_seconds()
    await asyncio.sleep(delay)
    
    active_users = [int(uid) for uid in data['users'].keys()]
    sent_count = 0
    
    for user_id in active_users:
        try:
            await bot.send_message(user_id, text)
            sent_count += 1
        except:
            pass
    
    data['stats']['broadcasts'] += 1
    data['stats']['last_broadcast'] = scheduled_time.isoformat()
    save_data(data)

@dp.message(Command('stats'))
async def stats_handler(message: Message):
    if message.from_user.id != ADMIN_ID:
        return await message.answer("‚ùå <b>–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω!</b>")
    
    total_users = len(data['users'])
    materials_sent = data['stats'].get('materials', 0)
    broadcasts = data['stats'].get('broadcasts', 0)
    has_material_count = sum(1 for user in data['users'].values() if user.get('has_material', False))
    
    active_30d = sum(1 for user in data['users'].values() 
                     if 'received_material' in user and 
                     datetime.now() - datetime.fromisoformat(user['received_material']) < timedelta(days=30))
    
    last_broadcast = data['stats'].get('last_broadcast', '–ù–∏–∫–æ–≥–¥–∞')
    if last_broadcast != '–ù–∏–∫–æ–≥–¥–∞':
        last_broadcast = datetime.fromisoformat(last_broadcast).strftime('%d.%m.%Y %H:%M')
    
    stats_text = (
        f"üìä <b>–°–¢–ê–¢–ò–°–¢–ò–ö–ê –ë–û–¢–ê</b>\n\n"
        f"üë• <b>–í—Å–µ–≥–æ —é–∑–µ—Ä–æ–≤:</b> {total_users}\n"
        f"üìö <b>–ú–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –≤—ã–¥–∞–Ω–æ:</b> {materials_sent}\n"
        f"üîí <b>–ò–º–µ—é—Ç –¥–æ—Å—Ç—É–ø:</b> {has_material_count}\n"
        f"üì§ <b>–†–∞—Å—Å—ã–ª–æ–∫:</b> {broadcasts}\n"
        f"üî• <b>–ê–∫—Ç–∏–≤–Ω—ã—Ö (30–¥):</b> {active_30d}\n\n"
        f"‚è∞ <b>–ü–æ—Å–ª–µ–¥–Ω—è—è —Ä–∞—Å—Å—ã–ª–∫–∞:</b> {last_broadcast}"
    )
    
    await message.answer(stats_text, parse_mode='HTML')

@dp.message(Command('help'))
async def help_handler(message: Message):
    help_text = (
        f"ü§ñ <b>–ë–û–¢ {CHANNEL_USERNAME}</b>\n\n"
        f"üë§ <b>–î–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b>\n"
        f"/start ‚Äî –ù–∞—á–∞—Ç—å\n\n"
        f"üì§ <b>–î–ª—è –∞–¥–º–∏–Ω–∞ ({ADMIN_ID}):</b>\n"
        f"/broadcast —Ç–µ–∫—Å—Ç ‚Äî –†–∞—Å—Å—ã–ª–∫–∞\n"
        f"/schedule HH:MM —Ç–µ–∫—Å—Ç ‚Äî –û—Ç–ª–æ–∂–µ–Ω–Ω–∞—è\n"
        f"/stats ‚Äî –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
        f"/help ‚Äî –ü–æ–º–æ—â—å"
    )
    
    await message.answer(help_text, parse_mode='HTML')

# ===== WEBHOOK –î–õ–Ø RENDER =====
async def main():
    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    print(f"üì¢ –ö–∞–Ω–∞–ª: {CHANNEL_USERNAME}")
    print(f"üë§ –ê–¥–º–∏–Ω: {ADMIN_ID}")
    print(f"üåê –ü–æ—Ä—Ç: {PORT}")
    
    # POLLING –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã (—Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ Render)
    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main())