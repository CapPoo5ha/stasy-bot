import asyncio
import json
import os
from datetime import datetime, timedelta
from dotenv import load_dotenv  # pip install python-dotenv

from aiogram import Bot, Dispatcher, F
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.exceptions import TelegramForbiddenError

# ===== –ó–ê–ì–†–£–ó–ö–ê –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò =====
load_dotenv()  # –ß–∏—Ç–∞–µ—Ç .env —Ñ–∞–π–ª

TOKEN = os.getenv('TOKEN')
ADMIN_ID = int(os.getenv('ADMIN_ID'))
CHANNEL_USERNAME = os.getenv('CHANNEL_USERNAME')
MATERIAL_URL = os.getenv('MATERIAL_URL')

# –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –≤—Å—ë –∑–∞–≥—Ä—É–∑–∏–ª–æ—Å—å
if not all([TOKEN, ADMIN_ID, CHANNEL_USERNAME, MATERIAL_URL]):
    raise ValueError("‚ùå –ü—Ä–æ–≤–µ—Ä—å .env —Ñ–∞–π–ª! –í—Å–µ –ø–æ–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã.")

DATA_FILE = 'users.json'

# ===== –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –î–õ–Ø WINDOWS =====
if os.name == 'nt':
    asyncio.set_event_loop_policy(asyncio.WindowsSelectorEventLoopPolicy())

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
bot = Bot(token=TOKEN)
dp = Dispatcher()

# –ó–∞–≥—Ä—É–∑–∫–∞/—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
def load_data():
    if os.path.exists(DATA_FILE):
        with open(DATA_FILE, 'r', encoding='utf-8') as f:
            return json.load(f)
    return {'users': {}, 'stats': {'materials': 0, 'broadcasts': 0}}

def save_data(data):
    with open(DATA_FILE, 'w', encoding='utf-8') as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

data = load_data()

@dp.message(Command('start'))
async def start_handler(message: Message):
    user_id = message.chat.id
    if str(user_id) not in data['users']:
        data['users'][str(user_id)] = {
            'first_interaction': datetime.now().isoformat(),
            'last_activity': datetime.now().isoformat(),
            'has_material': False  # –ù–æ–≤—ã–π —Ñ–ª–∞–≥ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        }
    else:
        data['users'][str(user_id)]['last_activity'] = datetime.now().isoformat()
    save_data(data)
    
    markup = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìö –ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª–µ–∑–Ω—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª", callback_data="check_subscription")]
    ])
    
    await message.answer(
        f"üëã –ü—Ä–∏–≤–µ—Ç!\n\n"
        f"–ü–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª <b>{CHANNEL_USERNAME}</b> –∏ –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É, "
        f"—á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª –ø–æ –º–∞—Ä–∫–µ—Ç–∏–Ω–≥—É! üöÄ",
        reply_markup=markup,
        parse_mode='HTML'
    )

@dp.callback_query(F.data == 'check_subscription')
async def check_subscription(callback: CallbackQuery):
    user_id = callback.from_user.id
    user_key = str(user_id)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –Ω–µ—Ç
    if user_key not in data['users']:
        data['users'][user_key] = {
            'first_interaction': datetime.now().isoformat(),
            'last_activity': datetime.now().isoformat(),
            'has_material': False
        }
        save_data(data)
    
    user_data = data['users'][user_key]
    
    try:
        member = await bot.get_chat_member(CHANNEL_USERNAME, user_id)
        
        is_subscribed = member.status in ['member', 'administrator', 'creator']
        
        # –õ–æ–≥–∏–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏:
        # - –ï—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∞–Ω –ò –ù–ï –∏–º–µ–µ—Ç –º–∞—Ç–µ—Ä–∏–∞–ª ‚Äî –≤—ã–¥–∞—ë–º
        # - –ï—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∞–Ω –ò –∏–º–µ–µ—Ç –º–∞—Ç–µ—Ä–∏–∞–ª ‚Äî –Ω–∞–ø–æ–º–∏–Ω–∞–µ–º, —á—Ç–æ —É–∂–µ –ø–æ–ª—É—á–∏–ª
        # - –ï—Å–ª–∏ –ù–ï –ø–æ–¥–ø–∏—Å–∞–Ω –ò –∏–º–µ–µ—Ç –º–∞—Ç–µ—Ä–∏–∞–ª ‚Äî –±–ª–æ–∫–∏—Ä—É–µ–º, –ø–æ–∫–∞ –Ω–µ –ø–µ—Ä–µ–ø–æ–¥–ø–∏—à–µ—Ç—Å—è (—Ñ–ª–∞–≥ –Ω–µ —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç—Å—è)
        # - –ï—Å–ª–∏ –ù–ï –ø–æ–¥–ø–∏—Å–∞–Ω –ò –ù–ï –∏–º–µ–µ—Ç ‚Äî —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ –ø—Ä–æ—Å–∏–º –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è
        
        if is_subscribed:
            # –°–±—Ä–æ—Å —Ñ–ª–∞–≥–∞ –ø—Ä–∏ –ø–µ—Ä–µ–ø–æ–¥–ø–∏—Å–∫–µ (–µ—Å–ª–∏ –±—ã–ª –æ—Ç–ø–∏—Å–∞–Ω)
            if user_data.get('has_material', False):
                user_data['has_material'] = False
                save_data(data)
                await callback.message.answer(
                    "üéâ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –æ–±—Ä–∞—Ç–Ω–æ!</b>\n\n"
                    "–í—ã –ø–µ—Ä–µ–ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å ‚Äî –≤–æ—Ç —Å–≤–µ–∂–∏–π –º–∞—Ç–µ—Ä–∏–∞–ª –∑–∞–Ω–æ–≤–æ:",
                    reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                        [InlineKeyboardButton(text="üìñ –ü–æ–ª—É—á–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª", url=MATERIAL_URL)]
                    ]),
                    parse_mode='HTML'
                )
                return
            
            if not user_data.get('has_material', False):
                # –í—ã–¥–∞—ë–º –º–∞—Ç–µ—Ä–∏–∞–ª
                markup = InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üìñ –ü–æ–ª—É—á–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª", url=MATERIAL_URL)]
                ])
                
                await callback.message.answer(
                    "‚úÖ <b>–í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã!</b>\n\n"
                    f"–í–æ—Ç –≤–∞—à –ø–æ–ª–µ–∑–Ω—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª –ø–æ –º–∞—Ä–∫–µ—Ç–∏–Ω–≥—É –∏ –±–æ—Ç–∞–º Telegram:",
                    reply_markup=markup,
                    parse_mode='HTML'
                )
                
                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥
                user_data['has_material'] = True
                user_data['received_material'] = datetime.now().isoformat()
                data['stats']['materials'] += 1
                save_data(data)
            else:
                # –£–∂–µ –∏–º–µ–µ—Ç –º–∞—Ç–µ—Ä–∏–∞–ª
                await callback.message.answer(
                    "‚úÖ <b>–í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã!</b>\n\n"
                    "–í—ã —É–∂–µ –ø–æ–ª—É—á–∞–ª–∏ —ç—Ç–æ—Ç –º–∞—Ç–µ—Ä–∏–∞–ª —Ä–∞–Ω–µ–µ. "
                    "–•–æ—Ç–∏—Ç–µ —á—Ç–æ-—Ç–æ –Ω–æ–≤–æ–µ? –°–ª–µ–¥–∏—Ç–µ –∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏ –≤ –∫–∞–Ω–∞–ª–µ! üöÄ",
                    parse_mode='HTML'
                )
        else:
            # –ù–µ –ø–æ–¥–ø–∏—Å–∞–Ω
            if user_data.get('has_material', False):
                await callback.message.answer(
                    "üîí <b>–ú–∞—Ç–µ—Ä–∏–∞–ª –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω!</b>\n\n"
                    f"–í—ã —É–∂–µ –ø–æ–ª—É—á–∞–ª–∏ –µ–≥–æ, –Ω–æ –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç {CHANNEL_USERNAME}. "
                    "–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –∑–∞–Ω–æ–≤–æ, —á—Ç–æ–±—ã —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –¥–æ—Å—Ç—É–ø! ‚ú®",
                    parse_mode='HTML'
                )
            else:
                markup = InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text=f"üì¢ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ {CHANNEL_USERNAME}", url=f"https://t.me/{CHANNEL_USERNAME[1:]}")],
                    [InlineKeyboardButton(text="üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="check_subscription")]
                ])
                
                await callback.message.answer(
                    f"‚ùå <b>–í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã</b> –Ω–∞ –∫–∞–Ω–∞–ª {CHANNEL_USERNAME}\n\n"
                    "–ü–æ–¥–ø–∏—à–∏—Å—å –∏ –Ω–∞–∂–º–∏ '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É' –µ—â—ë —Ä–∞–∑! ‚ú®",
                    reply_markup=markup,
                    parse_mode='HTML'
                )
    
    except Exception as e:
        await callback.message.answer(
            f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏. –£–±–µ–¥–∏—Å—å, —á—Ç–æ –±–æ—Ç ‚Äî –∞–¥–º–∏–Ω –≤ –∫–∞–Ω–∞–ª–µ.\n"
            f"–î–µ—Ç–∞–ª–∏: {str(e)}"
        )
    
    await callback.answer()

# ===== –û–°–¢–ê–õ–¨–ù–û–ô –ö–û–î –ë–ï–ó –ò–ó–ú–ï–ù–ï–ù–ò–ô =====
@dp.message(Command('broadcast'))
async def broadcast_handler(message: Message):
    if message.from_user.id != ADMIN_ID:
        return await message.answer("‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω!")
    
    if len(message.text.split()) < 2:
        await message.answer(
            "üì§ <b>–†–∞—Å—Å—ã–ª–∫–∞</b>\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π: <code>/broadcast –¢–≤–æ–π —Ç–µ–∫—Å—Ç –∑–¥–µ—Å—å</code>",
            parse_mode='HTML'
        )
        return
    
    text = message.text.split(maxsplit=1)[1]
    active_users = [int(uid) for uid in data['users'].keys()]
    sent_count = 0
    failed_count = 0
    
    for user_id in active_users:
        try:
            await bot.send_message(user_id, text)
            sent_count += 1
        except TelegramForbiddenError:
            failed_count += 1
            del data['users'][str(user_id)]
        except Exception:
            failed_count += 1
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    data['stats']['broadcasts'] += 1
    data['stats']['last_broadcast'] = datetime.now().isoformat()
    save_data(data)
    
    await message.answer(
        f"üì§ <b>–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>\n\n"
        f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent_count}\n"
        f"‚ùå –û—à–∏–±–æ–∫: {failed_count}\n"
        f"üë• –û—Å—Ç–∞–ª–æ—Å—å –∞–∫—Ç–∏–≤–Ω—ã—Ö: {len(data['users'])}",
        parse_mode='HTML'
    )

@dp.message(Command('stats'))
async def stats_handler(message: Message):
    if message.from_user.id != ADMIN_ID:
        return await message.answer("‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω!")
    
    total_users = len(data['users'])
    materials_sent = data['stats'].get('materials', 0)
    broadcasts = data['stats'].get('broadcasts', 0)
    
    # –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞ 30 –¥–Ω–µ–π + —Å –º–∞—Ç–µ—Ä–∏–∞–ª–æ–º
    active_30d = sum(1 for user in data['users'].values() 
                     if 'received_material' in user and 
                     datetime.now() - datetime.fromisoformat(user['received_material']) < timedelta(days=30))
    
    has_material_count = sum(1 for user in data['users'].values() if user.get('has_material', False))
    
    last_broadcast = data['stats'].get('last_broadcast', '–ù–∏–∫–æ–≥–¥–∞')
    if last_broadcast != '–ù–∏–∫–æ–≥–¥–∞':
        last_broadcast = datetime.fromisoformat(last_broadcast).strftime('%d.%m.%Y %H:%M')
    
    stats_text = (
        f"üìä <b>–°–¢–ê–¢–ò–°–¢–ò–ö–ê –ë–û–¢–ê</b>\n\n"
        f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n"
        f"üìö –ú–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –≤—ã–¥–∞–Ω–æ: {materials_sent}\n"
        f"üîí –ü–æ–ª—É—á–∏–ª–∏ –º–∞—Ç–µ—Ä–∏–∞–ª: {has_material_count}\n"
        f"üì§ –†–∞—Å—Å—ã–ª–æ–∫ –ø—Ä–æ–≤–µ–¥–µ–Ω–æ: {broadcasts}\n"
        f"üî• –ê–∫—Ç–∏–≤–Ω—ã—Ö (30 –¥–Ω–µ–π): {active_30d}\n\n"
        f"‚è∞ –ü–æ—Å–ª–µ–¥–Ω—è—è —Ä–∞—Å—Å—ã–ª–∫–∞: {last_broadcast}"
    )
    
    await message.answer(stats_text, parse_mode='HTML')

@dp.message(Command('schedule'))
async def schedule_handler(message: Message):
    if message.from_user.id != ADMIN_ID:
        return await message.answer("‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω!")
    
    if len(message.text.split()) < 3:
        await message.answer(
            "‚è∞ <b>–û—Ç–ª–æ–∂–µ–Ω–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞</b>\n\n"
            "–§–æ—Ä–º–∞—Ç: <code>/schedule HH:MM —Ç–µ–∫—Å—Ç</code>\n"
            "–ü—Ä–∏–º–µ—Ä: <code>/schedule 18:00 –ü—Ä–∏–≤–µ—Ç, —ç—Ç–æ —Ç–µ—Å—Ç!</code>",
            parse_mode='HTML'
        )
        return
    
    parts = message.text.split(maxsplit=2)
    time_str, text = parts[1], parts[2]
    
    try:
        hour, minute = map(int, time_str.split(':'))
        now = datetime.now()
        scheduled_time = now.replace(hour=hour, minute=minute, second=0, microsecond=0)
        
        if scheduled_time <= now:
            scheduled_time += timedelta(days=1)
        
        asyncio.create_task(send_scheduled_broadcast(scheduled_time, text))
        
        await message.answer(
            f"‚è∞ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∞ <b>{scheduled_time.strftime('%H:%M %d.%m.%Y')}</b>!\n"
            f"üìù –¢–µ–∫—Å—Ç: <code>{text[:50]}...</code>",
            parse_mode='HTML'
        )
        
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏! –ò—Å–ø–æ–ª—å–∑—É–π HH:MM")

async def send_scheduled_broadcast(scheduled_time, text):
    delay = (scheduled_time - datetime.now()).total_seconds()
    await asyncio.sleep(delay)
    
    active_users = [int(uid) for uid in data['users'].keys()]
    sent_count = 0
    
    for user_id in active_users:
        try:
            await bot.send_message(user_id, text)
            sent_count += 1
        except:
            pass
    
    data['stats']['broadcasts'] += 1
    data['stats']['last_broadcast'] = scheduled_time.isoformat()
    save_data(data)
    
    print(f"‚è∞ –û—Ç–ª–æ–∂–µ–Ω–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ {scheduled_time}! üë• {sent_count} –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π")

@dp.message(Command('help'))
async def help_handler(message: Message):
    help_text = (
        f"ü§ñ <b>–ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É @{CHANNEL_USERNAME}</b>\n\n"
        "/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É\n"
        "/help - –≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n\n"
        f"üì§ <b>–î–ª—è –∞–¥–º–∏–Ω–∞:</b>\n"
        "/broadcast –¢–µ–∫—Å—Ç - –ú–≥–Ω–æ–≤–µ–Ω–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞\n"
        "/schedule HH:MM –¢–µ–∫—Å—Ç - –û—Ç–ª–æ–∂–µ–Ω–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞\n"
        "/stats - –ü–æ–ª–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"
    )
    
    await message.answer(help_text, parse_mode='HTML')

async def main():
    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    print(f"üì¢ –ö–∞–Ω–∞–ª: {CHANNEL_USERNAME}")
    print(f"üë§ –ê–¥–º–∏–Ω: {ADMIN_ID}")
    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main())